<?php
/**
 * @file
 * Provides Webcam at the user profile edit page available at user/<uid>/edit
 */

/**
 * Implements hook_menu().
 */
function webcam_menu() {
  $items['admin/config/media/webcam'] = array(
    'title' => 'Webcam Configuration',
    'description' => 'Configuration settings of the Webcam.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webcam_settings'),
    'access arguments' => array('administer webcam'),
    'file' => 'webcam.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['webcam/upload'] = array(
    'title' => 'Upload Picture',
    'page callback' => 'webcam_upload',
    'access arguments' => array('use webcam'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function webcam_permission() {
  return array(
    'administer webcam' => array(
      'title' => t('Administer Webcam'),
      'description' => t('Perform administrative tasks for webcam module.'),
    ),
    'use webcam' => array(
      'title' => t('Use Webcam'),
      'description' => t('Allow users to use the Webcam'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function webcam_theme($existing, $type, $theme, $path) {
  return array(
    'webcam' => array(
      'render element' => 'element',
      'variables' => array(
        'user' => NULL,
        'video_width' => check_plain(variable_get('webcam_width', 320)),
        'video_height' => check_plain(variable_get('webcam_height', 240)),
      ),
      'template' => '/theme/webcam',
    ),
  );
}

/**
 * Upload image to public folder.
 */
function webcam_upload() {
  global $user;
  $status = array();
  // Check the token to make sure it is a valid request.
  if (!empty($_POST['webcam_token']) && drupal_valid_token($_POST['webcam_token'], 'webcam-upload') && !empty($_POST['img_data'])) {
    $uri = 'public://';
    $wrapper = file_stream_wrapper_get_instance_by_uri($uri);
    // Tried using drupal_realpath() instead of realpath() but unfortunately its not working!
    $upload_dir = $wrapper->realpath() . '/' . variable_get('webcam_path', 'webcam') . '/';
    $img = $_POST['img_data'];
    $img = str_replace('data:image/png;base64,', '', $img);
    $img = str_replace(' ', '+', $img);
    $data = base64_decode($img);
    // This will help us to store the images in a unique format.
    $filename = $user->name . '-' . REQUEST_TIME . '.png';
    $file = $upload_dir . $filename;
    $success = file_put_contents($file, $data);
    $status = array(
      'status'  => ($success) ? array(
        'msg'   => t('File saved successfully.'),
        'value' => 1,
        'file'  => $filename,
      ) : array('msg' => t('Problem while saving the file. Please check directory write permission'), 'value' => 0),
    );
  }
  else {
    $status = array(
      'status'  => FALSE,
    );
  }
  print drupal_json_encode($status);
  drupal_page_footer();
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function webcam_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  if (user_access('use webcam')) {
    $settings = array(
      'width' => check_plain(variable_get('webcam_width', 320)),
      'height' => check_plain(variable_get('webcam_height', 240)),
      'webcamToken' => drupal_get_token('webcam-upload'),
    );
    $form['#attached']['js'] = array(
      drupal_get_path('module', 'webcam') . '/js/webcam.js',
      array(
        'data' => array('webcam' => $settings),
        'type' => 'setting',
      ),
    );

    $form['picture']['upload_type'] = array(
      '#type' => 'radios',
      '#default_value' => 'upload_picture',
      '#weight' => -1,
      '#options' => array(
        'upload_picture' => t('Upload Picture'),
        'capture_picture' => t('Capture Picture'),
      ),
    );

    $form['picture']['picture_upload']['#states'] = array(
      'visible' => array(
        'input[name="upload_type"]' => array(
          'value' => 'upload_picture'),
      ),
    );
    $form['picture']['capture_picture'] = array(
      '#type' => 'item',
      '#markup' => theme('webcam', array('account' => $user)),
      '#states' => array(
        'visible' => array('input[name="upload_type"]' => array('value' => 'capture_picture')),
      ),
    );

    $form['picture']['webcam'] = array(
      '#type' => 'hidden',
      '#attributes' => array(
        'id' => 'webcam-data',
      ),
    );
    $form['#submit'][] = 'webcam_user_profile_submit';
  }
}

/**
 * Custom submit handler for user profile form submit.
 *
 * @see webcam_form_alter
 */
function webcam_user_profile_submit(&$form, &$form_state) {
  global $user;
  $validators = array(
    'file_validate_is_image' => array(),
    'file_validate_image_resolution' => array(variable_get('user_picture_dimensions', '85x85')),
    'file_validate_size' => array(variable_get('user_picture_file_size', '30') * 1024),
    'file_validate_extensions' => array('png'),
  );
  if ($form_state['values']['webcam'] && $form_state['values']['upload_type'] == 'capture_picture') {
    $filename = $form_state['values']['webcam'];
    $picture_directory = 'public://' . variable_get('webcam_path', 'webcam');
    $uri = file_stream_wrapper_uri_normalize($picture_directory . '/' . $filename);
    // Create a file object.
    $file = new stdClass();
    $file->uid = $user->uid;
    $file->filename = $filename;
    $file->uri = $uri;
    $file->filemime = 'image/png';
    $file->filesize = filesize($uri);
    $file->status = 1;

    // Check for errors.
    $errors = file_validate($file, $validators);
    if (!empty($errors)) {
      if (count($errors) > 1) {
        $message = theme('item_list', array('items' => $errors));
      }
      else {
        $message = ' ' . array_pop($errors);
      }
      form_set_error('picture', $message);
      return FALSE;
    }
    // If there are no errors record this file in the database.
    $file_obj = file_save($file);
    // Save user profile.
    $account = user_load($user->uid);
    $old_pic = $account->picture;
    $edit = array(
      'picture' => $file_obj,
    );
    $acc_save = user_save($account, $edit);
    file_usage_add($file_obj, 'user', 'user', $account->uid);
    // Delete old picture if changes were saved in user account.
    if ($acc_save && !empty($old_pic)) {
      file_usage_delete($old_pic, 'user', 'user', $account->uid);
      file_delete($old_pic);
    }
  }
}
